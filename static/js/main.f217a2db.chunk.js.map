{"version":3,"sources":["components/ContactBook.js","App.js","serviceWorker.js","index.js"],"names":["ContactBook","setName","event","setState","newname","target","value","state","contacts","map","x","name","indexOf","warning","setNum","newnum","setSearch","h","search","k","someNames","filter","includes","fullContact","t","searchArray","addContact","length","n","id","idgen","number1","view","refer","React","createRef","push","alert","deleteContact","a","i","splice","expand","current","className","innerHTML","this","display","Fragment","key","onClick","ref","type","onChange","placeholder","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f217a2db.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass ContactBook extends Component\r\n{\r\n  constructor()\r\n  {\r\n    super()\r\n      this.state = {\r\n      warning:\"\",\r\n      newname:\"\",\r\n      newnum:\"\",\r\n      search:\"\",\r\n      searchArray:null,\r\n      idgen:2,\r\n      contacts : [\r\n        {\r\n          id:0,\r\n          name:\"Paramvir\",\r\n          number1:\"7009226916\",\r\n          view:false, // Extra detials will not be displayed\r\n          refer:React.createRef(),\r\n        },\r\n        {\r\n          id:1,\r\n          name:\"Aman\",\r\n          number1:\"8427836951\",\r\n          view:false,\r\n          refer:React.createRef(),\r\n        }\r\n      ]\r\n    }\r\n  }\r\n\r\n  setName = (event) =>{\r\n\r\n    this.setState({\r\n      newname: event.target.value,\r\n    },() => {\r\n      let k = this.state.contacts;\r\n      let allNames = k.map((x)=>\r\n      {\r\n        return(x.name);\r\n      });\r\n\r\n      let i = allNames.indexOf(this.state.newname);\r\n\r\n      if(i!==-1)\r\n      {\r\n        this.setState({warning: \"Contact Already Present\"});\r\n      }\r\n      else{\r\n        this.setState({warning: \"\"});\r\n      }\r\n    });\r\n  }\r\n\r\n  setNum = (event) =>{\r\n    this.setState({newnum: event.target.value});\r\n  }\r\n\r\n  setSearch = (event) => {\r\n    let h = event.target.value;\r\n    this.setState({search: event.target.value}, () => {\r\n      let k = this.state.contacts;\r\n      // Returning Array of all Names in Contact List\r\n      let allNames = k.map((x)=>\r\n      {\r\n        return(x.name);\r\n      });\r\n\r\n      // Returning Array of Names that matches search with Contact List\r\n      let someNames = allNames.filter((x)=>{\r\n        if(x.includes(h))\r\n        {\r\n        //console.log(x);\r\n        return(x);\r\n        }\r\n      });\r\n\r\n      // Returning Full Object of Name that matches with someNames\r\n      let fullContact = k.filter((x)=>\r\n      {\r\n        \r\n        for(let t in someNames)\r\n        {\r\n          \r\n          if(someNames[t]==x.name)\r\n          {\r\n            //console.log(x);\r\n            return (x);\r\n          }\r\n        }\r\n      });\r\n      \r\n      if(h!==\"\")\r\n      this.setState({\r\n        searchArray:fullContact,\r\n      })\r\n      else\r\n      this.setState({\r\n        searchArray:null,\r\n      })\r\n\r\n    });\r\n    \r\n  }\r\n\r\n  addContact = () =>\r\n  {\r\n    if(this.state.newnum.length>0 && this.state.newname.length>0)\r\n    {\r\n      let k = this.state.contacts;\r\n      let allNames = k.map((x)=>\r\n      {\r\n        return(x.name)\r\n      });\r\n\r\n      let i = allNames.indexOf(this.state.newname);\r\n\r\n      if(i==-1)\r\n      {\r\n        let n = {\r\n          id: this.state.idgen,\r\n          name:this.state.newname,\r\n          number1:this.state.newnum,\r\n          view:false,\r\n          refer:React.createRef(),\r\n        };\r\n\r\n        k.push(n);\r\n        this.setState({\r\n          contacts:k,\r\n          newname:\"\",\r\n          newnum:\"\",\r\n          idgen:this.state.idgen+1,\r\n        })    \r\n      }\r\n      else\r\n      {\r\n        alert(\"Contact Already Present\");\r\n      }\r\n    }\r\n    else\r\n    alert(\"Please Fill Correct Details\");\r\n  }\r\n\r\n  deleteContact = (id) =>\r\n  {\r\n    let a = this.state.contacts;\r\n    let i = a.indexOf(a[id]);\r\n    a.splice(i,1);\r\n    this.setState({\r\n      contacts:a,\r\n    })\r\n\r\n  }\r\n\r\n  expand  = (id) =>\r\n  {\r\n    let a = this.state.contacts;\r\n    for(let x in a)\r\n    {\r\n      if(a[x].id == id)\r\n      {\r\n        var i = x;\r\n      }\r\n    }\r\n    \r\n    if(a[i].view)\r\n    {\r\n      a[i].view = false;\r\n      a[i].refer.current.className = \"btn btn-primary\";\r\n      a[i].refer.current.innerHTML = \"View\";\r\n    }\r\n    else\r\n    {\r\n      a[i].view = true;\r\n      a[i].refer.current.className = \"btn btn-info\";  \r\n      a[i].refer.current.innerHTML = \"Hide\";\r\n    }\r\n\r\n    this.setState({\r\n      contacts:a,\r\n    })\r\n  }\r\n\r\n\r\n  render()\r\n  {\r\n    let k;\r\n\r\n    if(this.state.contacts.length==0)\r\n    {\r\n      k = (<h1 className = \"my-3 text-secondary text-center\">No Contacts Found</h1>);\r\n    }\r\n    else\r\n    {\r\n    if(this.state.searchArray) \r\n    {   \r\n    k = this.state.searchArray.map((x) => {\r\n\r\n      const display = (<>\r\n        <hr/>\r\n        <h6>Mobile: {x.number1}</h6>\r\n        <hr/>\r\n        </>);\r\n\r\n      return (<React.Fragment key = {x.id}>\r\n        <div className = \"bg-light text-dark p-3\">\r\n          <h3 className = \"text-secondary d-flex justify-content-between\">{x.name}\r\n            <div>\r\n            <button className = \"btn btn-danger mx-3\" onClick={()=>this.deleteContact(x.id)}>Delete</button> \r\n            <button className = \"btn btn-primary\" ref ={x.refer} onClick = {()=>{this.expand(x.id)}}>View</button>\r\n                    \r\n            </div>\r\n          </h3>\r\n         \r\n\r\n          <div>{x.view && display}</div>\r\n        </div>\r\n      </React.Fragment>)\r\n    });}\r\n    else{\r\n      k = this.state.contacts.map((x) => {\r\n\r\n        const display = (<>\r\n          <hr/>\r\n          <h6>Mobile: {x.number1}</h6>\r\n          <hr/>\r\n          </>);\r\n  \r\n        return (<React.Fragment key = {x.id}>\r\n          <div className = \"bg-light text-dark p-3\">\r\n            <h3 className = \"text-secondary d-flex justify-content-between\">{x.name}\r\n              <div>\r\n              <button className = \"btn btn-danger mx-3\" onClick={()=>this.deleteContact(x.id)}>Delete</button> \r\n              <button className = \"btn btn-primary\" ref ={x.refer} onClick = {()=>{this.expand(x.id)}}>View</button>\r\n                      \r\n              </div>\r\n            </h3>\r\n           \r\n  \r\n            <div>{x.view && display}</div>\r\n          </div>\r\n        </React.Fragment>)\r\n      });\r\n    }\r\n  \r\n  }\r\n\r\n    return(<div className=\"\">\r\n     \r\n      <h2 className=\"bg-dark text-white py-4 pl-3\">Contact List</h2>\r\n\r\n      <div className=\"my-5\">\r\n        <div className=\"mx-5 my-4\">\r\n          <input type=\"search\" onChange = {this.setSearch} value={this.state.search} className=\"form-control\" placeholder=\"Search Contacts\"/>\r\n        </div>\r\n\r\n        {k}\r\n      </div>\r\n      <hr/>\r\n      <h2 className=\"bg-dark text-white py-4 pl-3\">Add New Contact</h2>\r\n    <div className = \"text-center px-5\">\r\n      \r\n\r\n      <h4 className=\"text-danger my-3\">{this.state.warning}</h4>\r\n      <input type = \"text\" onChange = {this.setName} placeholder=\"Enter Name\" value={this.state.newname} className=\"form-control w-100 mt-3\"/>\r\n      <input type = \"number\" onChange = {this.setNum} placeholder=\"Enter Number\" value={this.state.newnum} className=\"form-control w-100 mt-3\"/>\r\n      <button className=\"btn btn-success m-3\" onClick = {this.addContact}>Add New</button></div>    \r\n    </div>);\r\n  }\r\n}\r\n\r\nexport default ContactBook;","import React from 'react';\nimport './App.css';\nimport ContactBook from './components/ContactBook.js';\n\nfunction App() {\n  return (\n    <>\n      <ContactBook></ContactBook>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}